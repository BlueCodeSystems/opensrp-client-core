apply plugin: 'maven-publish'
apply plugin: 'signing'

def sonatypeRepositoryURL
def mavenLocalFlag = hasProperty('mavenLocal') ? mavenLocal.toBoolean() : true
def timestampMsg = " at " + getDate()

if (isReleaseBuild()) {
    println 'PROCESSING MAVEN ' + (mavenLocalFlag ? 'LOCAL' : 'REMOTE') + ' RELEASE BUILD VERSION ' + project.VERSION_NAME + timestampMsg + '...'
    sonatypeRepositoryURL = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println 'PROCESSING MAVEN ' + (mavenLocalFlag ? 'LOCAL' : 'REMOTE') + ' SNAPSHOT BUILD VERSION ' + project.VERSION_NAME + timestampMsg + '...'
    sonatypeRepositoryURL = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryPassword() {
    return hasProperty('sonatypePassword') ? sonatypePassword : ""
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUsername') ? sonatypeUsername : ""
}

afterEvaluate { project ->

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    task androidJavadocsJar(type: Jar) {
        archiveClassifier.set('javadoc')
    }

    publishing {
        publications {
            maven(MavenPublication) {
                afterEvaluate {
                    from components.release
                }
                
                artifactId = hasProperty('POM_SETTING_ARTIFACT_ID') ? POM_SETTING_ARTIFACT_ID : project.name
                
                artifact androidSourcesJar
                artifact androidJavadocsJar

                // For Central bundle releases, strip SNAPSHOT deps from published POM
                if ((project.findProperty('centralRelease')?.toString()?.toBoolean()) == true) {
                    pom.withXml {
                        def n = asNode()
                        def deps = n.get('dependencies')?.getAt(0)
                        if (deps) {
                            deps.children().removeAll { d ->
                                def ver = d.version?.text()
                                ver?.endsWith('SNAPSHOT')
                            }
                        }
                    }
                }

                pom {
                    name = hasProperty('POM_SETTING_NAME') ? POM_SETTING_NAME : project.name
                    packaging = hasProperty('POM_SETTING_PACKAGING') ? POM_SETTING_PACKAGING : 'aar'
                    description = hasProperty('POM_SETTING_DESCRIPTION') ? POM_SETTING_DESCRIPTION : project.description
                    url = hasProperty('POM_SETTING_URL') ? POM_SETTING_URL : ''

                    scm {
                        url = hasProperty('POM_SETTING_SCM_URL') ? POM_SETTING_SCM_URL : ''
                        connection = hasProperty('POM_SETTING_SCM_CONNECTION') ? POM_SETTING_SCM_CONNECTION : ''
                        developerConnection = hasProperty('POM_SETTING_SCM_DEV_CONNECTION') ? POM_SETTING_SCM_DEV_CONNECTION : ''
                    }

                    licenses {
                        license {
                            name = hasProperty('POM_SETTING_LICENCE_NAME') ? POM_SETTING_LICENCE_NAME : ''
                            url = hasProperty('POM_SETTING_LICENCE_URL') ? POM_SETTING_LICENCE_URL : ''
                            distribution = hasProperty('POM_SETTING_LICENCE_DIST') ? POM_SETTING_LICENCE_DIST : ''
                        }
                    }

                    developers {
                        developer {
                            id = hasProperty('POM_SETTING_DEVELOPER_ID') ? POM_SETTING_DEVELOPER_ID : ''
                            name = hasProperty('POM_SETTING_DEVELOPER_NAME') ? POM_SETTING_DEVELOPER_NAME : ''
                        }
                    }
                }
            }
        }

        repositories {
            if (mavenLocalFlag) {
                mavenLocal()
            } else {
                maven {
                    name = "sonatype"
                    url = sonatypeRepositoryURL
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

def getDate() {
    return new Date().format('yyyy-MM-dd HH:mm:ss')
}